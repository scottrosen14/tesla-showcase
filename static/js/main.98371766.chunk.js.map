{"version":3,"sources":["components/Orbit.jsx","components/Background.jsx","components/Floor.jsx","state.js","components/ColorPicker.jsx","components/BoundingBox.jsx","components/Model.jsx","components/Draggable.jsx","components/Cars.jsx","components/CameraControls.jsx","components/CameraButtons.jsx","components/Bulb.jsx","components/Lights.jsx","components/Effects.jsx","components/Spinner.jsx","App.js","reportWebVitals.js","index.js"],"names":["extend","OrbitControls","Orbit","useThree","camera","gl","attach","args","domElement","Background","props","texture","useLoader","THREE","process","formatted","useMemo","image","height","fromEquirectangularTexture","object","Floor","useBox","ref","receiveShadow","color","opacity","state","activeMesh","activeMeshName","cameraPos","target","shouldUpdate","sharedStyles","width","borderRadius","cursor","ColorPicker","handleClick","e","material","style","background","position","zIndex","left","right","margin","display","top","onClick","BoundingBox","offset","dims","visible","children","mass","api","scale","wireframe","Model","mixer","model","GLTFLoader","path","animations","length","scene","forEach","clip","clipAction","play","useFrame","delta","update","traverse","child","isMesh","castShadow","side","DragControls","Draggable","groupRef","useRef","controlsRef","useState","setChildren","useEffect","current","addEventListener","orbitControls","enabled","console","log","set","copy","velocity","transformGroup","Cars","fallback","Array","fill","CameraControls","name","getObjectByName","lerp","clone","sub","justifyContent","alignItems","backgroundColor","fontSize","fontWeight","border","CameraButtons","sets","focusIndex","direction","num","className","bottom","Bulb","lights","push","shadow-mapSize-height","shadow-mapSize-width","shadow-radius","emissive","Lights","intensity","Effects","setLights","focusDistance","focalLength","bokehScale","Spinner","_","get","rotation","y","x","App","window","innerWidth","innerHeight","windowDimensions","setWindowDimensions","handleResize","powerPreference","antialias","stencil","depth","shadowMap","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.98371766.chunk.js","sourcesContent":["import { extend, useThree } from 'react-three-fiber';\nimport {\n    OrbitControls\n} from 'three/examples/jsm/controls/OrbitControls';\nextend({ OrbitControls });\n\nconst Orbit = () => {\n    const { camera, gl } = useThree();\n    return (\n        <orbitControls \n            attach='orbitControls'\n            args={[camera, gl.domElement]} \n        />\n    )\n}\n\nexport default Orbit;","import { useLoader, useThree } from 'react-three-fiber';\nimport * as THREE from 'three';\nimport { useMemo } from 'react';\n\nconst Background = props => {\n    const texture = useLoader(\n        THREE.TextureLoader,\n        process.env.PUBLIC_URL + '/modern-background-gray.jpeg'\n    );\n\n    const { gl } = useThree();\n    const formatted = useMemo(() =>\n        new THREE.WebGLCubeRenderTarget(\n            texture.image.height\n        ).fromEquirectangularTexture(gl, texture)\n    ,[gl, texture])\n\n    return (\n        <primitive\n            attach='background'\n            object={formatted}\n        />\n    )\n}\n\nexport default Background;\n","import { useBox } from 'use-cannon';\n\nconst Floor = props => {\n    const [ref] = useBox(() => ({args: [20,1,10], ...props}))\n    return (\n        <mesh ref={ref} {...props} receiveShadow>\n            <boxBufferGeometry args={[200, 1, 200]} />\n            <meshPhysicalMaterial color={'black'} opacity={1}/>\n        </mesh>\n    )\n}\n\nexport default Floor;\n","import * as THREE from 'three'\n// model3 name: \"Capot001_CAR_PAINT_0\"\n// model s name: \"object005_bod_0\"\nconst state = {\n    activeMesh: {},\n    activeMeshName: \"Capot001_CAR_PAINT_0\",\n    cameraPos: new THREE.Vector3(9,2,4),\n    target: new THREE.Vector3(4,0,0),\n    shouldUpdate: true\n}\n\nexport default state","import * as THREE from 'three';\nimport state from '../state'\n\nconst sharedStyles = {\n    height: 50,\n    width: 50,\n    borderRadius: '50%',\n    cursor: 'pointer'\n};\n\nconst ColorPicker = props => {\n    const handleClick = e => {\n        if (!state.activeMesh) return;\n        state.activeMesh.material.color = new THREE.Color(e.target.style.background)\n    }\n    return (\n        <div\n            style={{\n                position: 'absolute',\n                zIndex: 1,\n                left: 0,\n                right: 0,\n                margin: 'auto',\n                width: 'fit-content',\n                display: 'flex',\n                top: '20px'\n            }}\n        >\n            <div\n                onClick={handleClick}\n                style={{\n                    background: 'rgb(243, 246, 247)',\n                    ...sharedStyles\n                }}\n            />\n            <div\n                onClick={handleClick}\n                style={{\n                    background: 'black',\n                    ...sharedStyles\n                }}\n            />\n            <div\n                onClick={handleClick}\n                style={{\n                    background: 'red',\n                    ...sharedStyles\n                }}\n            />\n            <div\n                onClick={handleClick}\n                style={{\n                    background: 'rgb(30, 75, 93)',\n                    ...sharedStyles\n                }}\n            />\n            <div\n                onClick={handleClick}\n                style={{\n                    background: '#000d89',\n                    ...sharedStyles\n                }}\n            />\n            <div\n                onClick={handleClick}\n                style={{\n                    background: '#175421',\n                    ...sharedStyles\n                }}\n            />\n        </div>\n    )\n}\n\nexport default ColorPicker;\n","import { useBox } from 'use-cannon'\n\nconst BoundingBox = ({\n    position = [0,0,0],\n    offset = [0,0,0],\n    dims = [1,1,1],\n    visible = false,\n    children\n}) => {\n    const [ref, api] = useBox(() => ({ mass: 1, args: dims, position: position }))\n    return (\n        <group ref={ref} api={api}>\n            <mesh scale={dims} visible={visible}>\n                <boxBufferGeometry />\n                <meshPhysicalMaterial wireframe/>\n            </mesh>\n            <group position={offset}>\n                {children}\n            </group>\n        </group>\n    )\n}\n\nexport default BoundingBox","import { useLoader, useFrame } from 'react-three-fiber';\nimport {\n    GLTFLoader\n} from 'three/examples/jsm/loaders/GLTFLoader';\nimport * as THREE from 'three'\n// small change\nconst Model = props => {\n    const model = useLoader(\n        GLTFLoader,\n        process.env.PUBLIC_URL + props.path\n    )\n\n    let mixer\n    if (model.animations.length > 0) {\n        mixer = new THREE.AnimationMixer(model.scene)\n        model.animations.forEach(clip => {\n            const action = mixer.clipAction(clip)\n            action.play()\n        })\n    }\n\n    useFrame((scene,delta) => {\n        mixer?.update(delta)\n    })\n\n    model.scene.traverse(child => {\n        if (child.isMesh) {\n            child.castShadow = true\n            child.receiveShadow = true\n            child.material.side = THREE.FrontSide\n        }\n    })\n\n    return (\n        <primitive\n            object={model.scene}\n            scale={props.scale}\n            position={props.position}\n        />\n    )\n}\n\nexport default Model;\n","import {\n    DragControls\n} from 'three/examples/jsm/controls/DragControls';\nimport { useRef, useEffect, useState } from 'react';\nimport { useThree, extend } from 'react-three-fiber';\nextend ({ DragControls });\n\nconst Draggable = props => {\n    const groupRef = useRef();\n    const controlsRef = useRef();\n    const [children, setChildren] = useState([])\n    const { camera, gl, scene } = useThree();\n\n    useEffect(() => {\n        setChildren(groupRef.current.children)\n    },[])\n\n    useEffect(() => {\n        controlsRef.current.addEventListener(\n            'hoveron',\n            e => scene.orbitControls.enabled = false\n        )\n        controlsRef.current.addEventListener(\n            'hoveroff',\n            e => scene.orbitControls.enabled = true\n        )\n        controlsRef.current.addEventListener(\n            'dragstart',\n            e => {\n                console.log(e.object);\n                e.object.api?.mass.set(0)\n            }\n        )\n        controlsRef.current.addEventListener(\n            'dragend',\n            e => e.object.api?.mass.set(1)\n        )\n        controlsRef.current.addEventListener(\n            'drag',\n            e => {\n                e.object.api?.position.copy(e.object.position)\n                e.object.api?.velocity.set(0,0,0)\n            }\n        )\n    },[children, scene.orbitControls])\n\n    return (\n        <group ref={groupRef}>\n            <dragControls\n                transformGroup={props.transformGroup}\n                ref={controlsRef}\n                args={[children,camera, gl.domElement]}\n            />\n            {props.children}\n        </group>\n    )\n}\n\nexport default Draggable;\n","import { Suspense } from 'react'\nimport BoundingBox from './BoundingBox'\nimport Model from './Model'\nimport Draggable from './Draggable'\n\nconst Cars = () => {\n    return (\n        <Suspense fallback={null}>\n            <Draggable transformGroup>\n                <BoundingBox\n                    position={[4, 4, 0]}\n                    dims={[3, 2, 6]}\n                    offset={[0, -0.4, 0.8]}\n                >\n                    <Model\n                        path='/tesla_model_3/scene.gltf'\n                        scale={new Array(3).fill(0.01)}\n                    />\n                </BoundingBox>\n            </Draggable>\n            <Draggable transformGroup>\n                <BoundingBox\n                    position={[-4, 4, 0]}\n                    dims={[3, 2, 7]}\n                    offset={[0, -0.8, 0.2]}\n                >\n                    <Model\n                        path='/tesla_model_s/scene.gltf'\n                        scale={new Array(3).fill(0.013)}\n                    />\n                </BoundingBox>\n            </Draggable>\n            <Draggable transformGroup>\n                <BoundingBox\n                    position={[-8, 0, 0]}\n                    dims={[3, 2, 7]}\n                    offset={[-4, -0.9, -0.4]}\n                >\n                    <Model\n                        path='/tesla_roadster_2020_interior/scene.gltf'\n                        scale={new Array(3).fill(2)}\n                    />\n                </BoundingBox>\n            </Draggable>\n\n            {/*<Draggable transformGroup >*/}\n            {/*    <Model*/}\n            {/*        path='/old_gramophone/scene.gltf'*/}\n            {/*        scale={new THREE.Vector3(.05, .05, .05)}*/}\n            {/*        position={[0, 0, 3]}*/}\n            {/*    />*/}\n            {/*</Draggable>*/}\n            {/*<Draggable transformGroup>*/}\n            {/*    <BoundingBox*/}\n            {/*        dims={[3, 2, 6]}*/}\n            {/*    >*/}\n            {/*        <Model*/}\n            {/*            path='/spectral_rubix/scene.gltf'*/}\n            {/*            scale={new THREE.Vector3(.3, .3, .3)}*/}\n            {/*            position={[0, 1, -5]}*/}\n            {/*        />*/}\n            {/*    </BoundingBox>*/}\n            {/*</Draggable>*/}\n        </Suspense>\n    )\n}\n\nexport default Cars\n","import { useFrame } from 'react-three-fiber'\nimport state from '../state'\n\nconst CameraControls = () => {\n\n    useFrame(({ camera, scene }) => {\n        if (state.activeMesh.name !== state.activeMeshName) {\n            state.activeMesh = scene.getObjectByName(\n                state.activeMeshName\n            ) || {}\n        }\n        if (state.shouldUpdate) {\n            camera.position.lerp(state.cameraPos,0.1)\n            scene.orbitControls.target.lerp(state.target,0.1)\n            scene.orbitControls.update()\n            const diff =\n                camera.position.clone()\n                    .sub(state.cameraPos).length()\n            if (diff < 0.1) state.shouldUpdate = false\n        }\n    })\n    return (\n        null\n    )\n}\n\nexport default CameraControls\n","import state from '../state'\n\nconst style = {\n    zIndex: 1,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: '50px',\n    width: '50px',\n    backgroundColor: 'rgb(30, 75, 93)',\n    color: 'black',\n    borderRadius: '50%',\n    fontSize: 20,\n    fontWeight: 'bold',\n    border: '1px solid black',\n    cursor: 'pointer'\n}\n\nconst CameraButtons = () => {\n    const sets = [\n        // Roadster\n        {\n            cameraPos: [-7, 2, 5],\n            target: [-12,0,0],\n            name: \"Object_6\"\n        },\n        // model_s\n        {\n            cameraPos: [1,2,5],\n            target: [-4,0,0],\n            name: \"object005_bod_0\"\n        },\n        // model_3\n        {\n            cameraPos: [9,2,4],\n            target: [4,0,0],\n            name: \"Capot001_CAR_PAINT_0\"\n        }\n    ];\n\n    let focusIndex = 2;\n    const handleClick = direction => {\n        if (direction === 'right' && focusIndex < sets.length - 1) {\n            focusIndex += 1;\n        } else if (direction === 'left' && focusIndex > 0) {\n            focusIndex -= 1;\n        } else {\n            console.log('no action')\n        }\n        const num = focusIndex;\n        state.cameraPos.set(...sets[num].cameraPos);\n        state.target.set(...sets[num].target);\n        state.activeMeshName = sets[num].name;\n        state.shouldUpdate = true;\n    };\n    return (\n        <div \n            className='button-switching-controls'\n            style={{\n                position: 'absolute',\n                width: '30%',\n                margin: 'auto',\n                display: 'flex',\n                justifyContent: 'space-between',\n                bottom: '5vh',\n                zIndex: 1\n            }}\n        >\n            <button\n                onClick={e => handleClick('left')}\n                style={{\n                    ...style\n                }}\n            >\n                {'<'}\n            </button>\n            <button\n                onClick={e => handleClick('right')}\n                style={{\n                    ...style\n                }}\n            >\n                {'>'}\n            </button>\n        </div>\n    )\n}\n\nexport default CameraButtons\n","import { useEffect, useRef } from 'react'\nimport { useThree } from 'react-three-fiber'\n\nconst Bulb = props => {\n    const ref = useRef()\n    const { scene } = useThree()\n    useEffect(() => {\n        if (scene.lights) scene.lights.push(ref)\n        else scene.lights = [ref]\n    }, [scene])\n    return (\n        <mesh {...props} ref={ref}>\n            <pointLight\n                castShadow\n                shadow-mapSize-height={2**10}\n                shadow-mapSize-width={2**10}\n                shadow-radius={10}\n            />\n            <sphereBufferGeometry args={[0.2, 20, 20]} />\n            <meshPhongMaterial emissive='white' />\n        </mesh>\n    )\n}\n\nexport default Bulb;\n","import Bulb from './Bulb'\n\nconst Lights = () => {\n    return (\n        <>\n            <ambientLight intensity={0.2}/>\n            <directionalLight \n                // shadow-mapSize-height={2**10}\n                // shadow-mapSize-width={2**10}\n                // shadow-radius={10}\n                intensity={0.5}\n                position={[6,3,0]}\n                // castShadow\n            />\n            <Bulb position={[-6,3,0]} />\n            <Bulb position={[0,3,0]} />\n            <Bulb position={[6, 3, 0]} />\n        </>\n    )\n}\n\nexport default Lights\n","import { \n    EffectComposer,\n    DepthOfField,\n    // GodRays\n} from 'react-postprocessing'\nimport { useState, useEffect } from 'react'\nimport { useThree } from 'react-three-fiber'\n\nconst Effects = () => {\n    const [lights, setLights] = useState(null)\n    const { scene } = useThree()\n    useEffect(() => {\n        if (scene.lights && scene.lights.length === 3)\n            setLights(scene.lights)\n    }, [scene.lights])\n    return (\n        lights ? \n            <EffectComposer>\n                <DepthOfField\n                    focusDistance={0}\n                    focalLength={1}\n                    bokehScale={2}\n                    height={480}\n                />\n                {/* {lights.map(light => \n                <GodRays \n                    key={light.current.uuid} \n                    sun={light.current}\n                />\n            )} */}\n            </EffectComposer>\n            :\n            null\n    )\n}\n\nexport default Effects","import React, {useRef} from 'react';\nimport * as THREE from 'three';\nimport {useFrame} from \"react-three-fiber\";\nimport _ from 'lodash';\n\nconst Spinner = () => {\n    const ref = useRef();\n    useFrame(state => {\n        const y = _.get(ref.current, 'rotation.y');\n        if (y) {\n            ref.current.rotation.y += .1;\n            ref.current.rotation.x += .1;\n        }\n    });\n\n    return (\n        <mesh ref={ref} position={[0, 3, 0]}>\n            <dodecahedronBufferGeometry args={[1, 1]} />\n            <meshPhysicalMaterial color={'rgb(30, 75, 93)'} opacity={.5} side={THREE.DoubleSide}/>\n        </mesh>\n    )\n};\n\nexport default Spinner;\n","import { useEffect, useState } from 'react';\nimport './App.css';\nimport {\n    Canvas\n} from 'react-three-fiber';\nimport { Physics } from 'use-cannon';\nimport { Suspense } from 'react';\nimport Orbit from './components/Orbit';\nimport Background from './components/Background';\nimport Floor from './components/Floor';\nimport ColorPicker from './components/ColorPicker';\nimport Cars from './components/Cars'\nimport CameraControls from './components/CameraControls'\nimport CameraButtons from './components/CameraButtons'\nimport Lights from './components/Lights'\nimport Effects from './components/Effects'\nimport Spinner from \"./components/Spinner\";\n\nfunction App() {\n    const [windowDimensions, setWindowDimensions] = useState({\n        width: window.innerWidth,\n        height: window.innerHeight\n    });\n\n    useEffect(() => {\n        window.addEventListener('resize', handleResize);\n    }, [windowDimensions]);\n\n    const handleResize = () => {\n        setWindowDimensions({\n            width: window.innerWidth,\n            height: window.innerHeight\n        });\n    };\n    return (\n        <div style={{height: '100vh', width: '100vw', display: 'flex', justifyContent: 'center'}}>\n            <ColorPicker />\n            <CameraButtons />\n            <Canvas\n                gl={{\n                    powerPreference: \"high-performance\",\n                    antialias: false,\n                    stencil: false,\n                    depth: false\n                }}\n                shadowMap\n                style={{background: 'black'}}\n                camera={{ position: [7,7,7] }}\n            >\n                <Suspense fallback={<Spinner />}>\n                    <Background windowDimensions={windowDimensions} />\n                </Suspense>\n                <CameraControls />\n                <Lights/>\n                <Orbit />\n                <Physics>\n                    <Cars />\n                    <Floor position={[0,-0.5,0]}/>\n                </Physics>\n                <Effects />\n            </Canvas>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}